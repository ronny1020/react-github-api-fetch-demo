{"version":3,"sources":["pages/Home.js","actions/getGitHubAPI.js","actions/actionTypes.js","App.js","serviceWorker.js","reducers/GitHubReposReducer.js","reducers/index.js","index.js"],"names":["connect","state","repos","GitHubReposReducer","getProduct","id","dispatch","a","url","fetch","response","json","type","payload","props","React","useState","user","setUser","numOfRows","setNumOfRows","columns","useEffect","document","documentElement","scrollHeight","window","innerHeight","scrollY","length","handleScroll","addEventListener","removeEventListener","result","className","thead_th","map","col","i","key","scope","tbody_tr","row","htmlFor","placeholder","name","defaultValue","onClick","getElementById","value","App","basename","location","pathname","exact","path","component","Home","Boolean","hostname","match","initialState","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","Fragment","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.167c3cfb.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getProduct } from '../actions/getGitHubAPI'\r\n\r\nfunction Home(props) {\r\n  const { getProduct, repos } = props\r\n\r\n  const [user, setUser] = React.useState('ronny1020')\r\n  const [numOfRows, setNumOfRows] = React.useState(1)\r\n\r\n  const columns = ['id', 'name', 'description', 'size', 'url']\r\n\r\n  useEffect(() => {\r\n    getProduct(user)\r\n  }, [getProduct, user])\r\n\r\n  useEffect(() => {\r\n    if (\r\n      document.documentElement.scrollHeight === window.innerHeight &&\r\n      window.scrollY === 0 &&\r\n      numOfRows < repos.length\r\n    ) {\r\n      setNumOfRows(numOfRows + 1)\r\n    }\r\n    const handleScroll = () => {\r\n      if (\r\n        window.scrollY + window.innerHeight ===\r\n          document.documentElement.scrollHeight &&\r\n        numOfRows < repos.length\r\n      ) {\r\n        setNumOfRows(numOfRows + 1)\r\n      }\r\n    }\r\n    window.addEventListener('scroll', handleScroll)\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll)\r\n    }\r\n  }, [numOfRows, repos.length])\r\n\r\n  let result = (\r\n    <div className=\"alert alert-warning\">\r\n      <strong>Warning!</strong> <span>Can't find data</span>\r\n    </div>\r\n  )\r\n  if (repos.length) {\r\n    const thead_th = columns.map((col, i) => (\r\n      <th key={i} scope=\"col\">\r\n        {col}\r\n      </th>\r\n    ))\r\n    const tbody_tr = repos.map((row, i) => {\r\n      if (i < numOfRows) {\r\n        return (\r\n          <tr key={i}>\r\n            {columns.map((col, i) => (\r\n              <th key={i} scope=\"col\">\r\n                {row[col]}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        )\r\n      }\r\n      return null\r\n    })\r\n\r\n    result = (\r\n      <table className=\"table table-striped my-5\">\r\n        <thead className=\"thead-dark\">\r\n          <tr>{thead_th}</tr>\r\n        </thead>\r\n        <tbody>{tbody_tr}</tbody>\r\n      </table>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"my-5\">GitHubAPI DEMO</h1>\r\n\r\n      <div className=\"my-5\">\r\n        <label htmlFor=\"userId\">Write the GitHub ID to search here:</label>\r\n        <div className=\"input-group mb-3\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"ID\"\r\n            id=\"userId\"\r\n            name=\"userId\"\r\n            defaultValue={user}\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <button\r\n              className=\"btn btn-success\"\r\n              onClick={() => {\r\n                setUser(document.getElementById('userId').value)\r\n              }}\r\n            >\r\n              Search ID\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {result}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    repos: state.GitHubReposReducer.repos,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { getProduct })(Home)\r\n","import { GET_GITHUB_API } from './actionTypes'\r\n\r\nexport const getProduct = (id) => {\r\n  return async (dispatch) => {\r\n    const url = `https://api.github.com/users/${id}/repos`\r\n    const response = await fetch(url)\r\n    const repos = await response.json()\r\n    dispatch({\r\n      type: GET_GITHUB_API,\r\n      payload: repos,\r\n    })\r\n  }\r\n}\r\n","export const GET_GITHUB_API = 'GET_GITHUB_API'\r\n","import React from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom'\n\nimport Home from './pages/Home'\n\nfunction App() {\n  return (\n    <BrowserRouter basename={window.location.pathname || ''}>\n      <Route exact path=\"/\" component={Home} />\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GET_GITHUB_API } from '../actions/actionTypes'\r\n\r\nconst initialState = {\r\n  repos: [],\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_GITHUB_API:\r\n      return {\r\n        ...state,\r\n        repos: action.payload,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport GitHubReposReducer from './GitHubReposReducer'\r\n\r\nexport const rootReducer = combineReducers({ GitHubReposReducer })\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport { rootReducer } from './reducers'\nimport thunk from 'redux-thunk'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(\n  rootReducer,\n  /* preloadedState, */ composeEnhancers(applyMiddleware(thunk))\n)\n\nReactDOM.render(\n  // <React.StrictMode>\n  <React.Fragment>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.Fragment>,\n  // </React.StrictMode>\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}